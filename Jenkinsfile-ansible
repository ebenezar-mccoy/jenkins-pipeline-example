pipeline {
  agent {
    label 'docker'
  }
  options {
    timestamps()
    checkoutToSubdirectory 'roles/base'
    ansiColor('xterm')
  }
  stages {
    stage('Prepare') {
      steps {
        // version setup
        script {
          currentBuild.displayName = "1.0.${currentBuild.number}"
        }
        // fetching inventory
        dir('ansible-wrk') {
          git credentialsId: 'creds', url: 'inventory.git'
        }
        // moving inventory files to right location
        sh 'mv ansible-wrk/ansible.cfg ansible-wrk/plays ansible-wrk/inventory .'
        // prepare dependencies passwords
        withCredentials([usernameColonPassword(credentialsId: 'creds2', variable: 'BITBUCKET')]) {
          sh 'sed -i "s#://#://$BITBUCKET@#g" roles/base/requirements.yml'
        }
        // download dependencies
        sh 'ansible-galaxy install -vvv -r roles/base/requirements.yml'
        // prepare vault
        withCredentials([string(credentialsId: 'creds3', variable: 'VAULT')]) {
          writeFile file: '/opt/jenkins/.ansible-vpass', text: "$VAULT\n"
        }
      }
    }
    stage('Dry Run: SOME_ENV') {
      steps {
        ansiblePlaybook(
          playbook: 'plays/base/configure.yml',
          inventory: 'inventory/SOME_ENV/hosts',
          credentialsId: 'creds4',
          hostKeyChecking: false,
          colorized: true,
          extras: '-DC')
      }
    }
    stage('Deploy: SOME_ENV') {
      steps {
        timeout(time:5, unit:'DAYS') {
          input message:'Approve deployment?', submitter: 'devops'
        }
        ansiblePlaybook(
          playbook: 'plays/base/configure.yml',
          inventory: 'inventory/iq/SOME_ENV/hosts',
          credentialsId: 'creds4',
          hostKeyChecking: false,
          colorized: true,
          extras: '-D')
      }
    }
  }
  post {
    always {
      // post version setup ( on failures )
      script {
        currentBuild.displayName = "1.0.${currentBuild.number}"
      }
    }
  }
}
